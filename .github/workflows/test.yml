name: Test Emergency Alerts Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  hacs-validation:
    name: HACS Validation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: HACS validation
      uses: "hacs/action@main"
      with:
        category: "integration"
        ignore: "brands"

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    #needs: [hacs-validation]
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/test_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r custom_components/emergency_alerts/test_requirements.txt

    - name: Run validation script
      run: |
        python validate_integration.py

    - name: Run backend tests
      run: |
        python -m pytest custom_components/emergency_alerts/tests/ -v --cov=custom_components/emergency_alerts --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r custom_components/emergency_alerts/test_requirements.txt

    - name: Run full test suite
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh

    - name: Archive integration artifacts
      uses: actions/upload-artifact@v4
      with:
        name: integration-build-${{ github.run_number }}
        path: |
          custom_components/emergency_alerts/
          !custom_components/emergency_alerts/__pycache__/
          !custom_components/emergency_alerts/tests/__pycache__/
        retention-days: 30

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy

    - name: Check Python formatting with Black
      run: |
        black --check --diff custom_components/emergency_alerts/

    - name: Check Python imports with isort
      run: |
        isort --check-only --diff custom_components/emergency_alerts/

    - name: Lint Python with flake8
      run: |
        flake8 custom_components/emergency_alerts/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Type check Python with mypy (Python 3.11 only)
      if: matrix.python-version == '3.11' || '3.11' == '3.11'
      run: |
        python -m pip install --upgrade pip
        pip install homeassistant==2023.1.0  # Use older HA version for mypy
        mypy custom_components/emergency_alerts/ --ignore-missing-imports
      continue-on-error: true
